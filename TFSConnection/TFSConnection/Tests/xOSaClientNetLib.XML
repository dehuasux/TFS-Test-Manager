<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xOSaClientNetLib</name>
    </assembly>
    <members>
        <member name="T:xOSaClientNetLib.Cli">
            <summary>
            C# Wrapper for xOSa Cli API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Cli.Dispose">
            <summary>
            IDisposable interface member 
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Cli.Close">
            <summary>
            Alias to Dispose
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Cli.Dispose(System.Boolean)">
            <summary>
            IDisposable interface implementation
            </summary>
            <param name="disposing">Disposing is true when this function is called by IDisposable interface, false when it is called by the Finalizer</param>
        </member>
        <member name="M:xOSaClientNetLib.Cli.Finalize">
            <summary>
            C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Cli.ReadStdOut(System.String@)">
            <summary>
            Read the whole standard output of a this program
            </summary>
            <param name="stdOut">The whole standard output string</param>
        </member>
        <member name="M:xOSaClientNetLib.Cli.ReadStdErr(System.String@)">
            <summary>
            Read the whole standard error of a this program
            </summary>
            <param name="stdErr">The whole standard error string</param>
        </member>
        <member name="M:xOSaClientNetLib.Cli.WriteStdIn(System.String)">
            <summary>
            Write string to application stdin
            </summary>
            <param name="stdIn">The whole standard error string</param>
            <returns>Number bytes written</returns>
        </member>
        <member name="M:xOSaClientNetLib.Cli.ReadAvailableStdErr(System.String@)">
            <summary>
            Read the currently available standard error of a this program
            </summary>
            <param name="stdErr">The whole standard error string</param>
        </member>
        <member name="M:xOSaClientNetLib.Cli.ReadAvailableStdOut(System.String@)">
            <summary>
            Read the currently available standard out of a this program
            </summary>
            <param name="stdOut">The whole standard error string</param>
        </member>
        <member name="M:xOSaClientNetLib.Cli.ReadOutput(System.String@,System.String@)">
            <summary>
            Read the whole standard output and error of a this program
            </summary>
            <param name="stdOut">The whole standard output string</param>
            <param name="stdErr">The whole standard error string</param>
        </member>
        <member name="M:xOSaClientNetLib.Cli.GetProcessEndStatus(System.Int32@)">
            <summary>
            Returns current process status and exit value if ended. Non blocking method
            </summary>
            <param name="processExitVal">if the process ended, returns the process exit status</param>
            <returns>true if the process ended, false if it is still running</returns>
        </member>
        <member name="M:xOSaClientNetLib.Cli.WaitForExit(System.Int32)">
            <summary>
            Waits specified time or until process will finish
            </summary>
            <param name="seconds">integer number of seconds to wait</param>
            <returns>true if exited</returns>
        </member>
        <member name="P:xOSaClientNetLib.Cli.XosaCliRetry">
            <summary>
            Status code for Retry Read* operation
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.StdoutAvailable">
            <summary>
            Notifies if stdout avaliable 
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.StderrAvailable">
            <summary>
            Notifies if stderr avaliable 
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.StdinAvailable">
            <summary>
            Notifies if stdin avaliable 
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.Pid">
            <summary>
            PID of this process
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliStartParameters">
            Input parameters for CLI Start command API 
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.size">
            IN: Call it with sizeof(struct XosaClientCliStartParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.command">
            IN: The executable command to run. Null terminated string
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.argc">
            IN: Number of arguments passed in argv
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.argv">
            IN: Arguments passed after command, NULL or empty string are no arguments, Null terminated strings
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.captureStdOut">
            IN: If true(1) will capture the stdout
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.captureStdErr">
            IN: If true(1) will capture the stderr
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.allowStdIn">
            IN: If true(1) will allow the stdin
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.workingDirectory">
            IN: Working directory for the excetuable to run in
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.userName">
            IN: User name to run as
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.password">
            IN: Password - password if required
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.isGui">
            IN: Indicator if command is GUI application - command will be invoked through Invocators mechanizm
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliStartParameters.handle">
            OUT: Handle - the handle to the cli object
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliGetPidParameters">
            Input parameters for CLI GetPid API 
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetPidParameters.size">
            IN: Call it with sizeof(struct XosaClientCliStartParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetPidParameters.handle">
            IN: handle - the handle to the cli object
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetPidParameters.pid">
            OUT: process ID
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters">
            Input parameters for Cli CliReadStdOut
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters.size">
            IN: Call it with sizeof(struct XosaClientCliReadStdOutParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters.contextHandle">
            IN: The handle to the process to read the output from
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters.bufferSize">
            IN: Size of allocated room in the buffer for the chars (without '\0').
            e.g. If buf has allocated N+1 chars, bufferSize passed should be N
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters.stopReading">
            IN: If true(1), than after this read, the handle for the stream will be closed.
            Should be false if more CliReadStdOut Calls will be made on this handle.
            If planning to read until eof, can be always true
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters.bytesRead">
            OUT: Size of allocated room in the buffer for the chars (without '\0').
            e.g. If buf has allocated N+1 chars, bufferSize passed should be N
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdOutParameters.buffer">
            IN/OUT: buffer - buffer to read into, will return a null terminated string
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters">
            Input parameters for Cli Cli Read Std Err
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters.size">
            IN: Call it with sizeof(struct XosaClientCliReadStdErrParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters.contextHandle">
            The handle to the process to read the output from.
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters.bufferSize">
            IN: Size of allocated room in the buffer for the chars (without '\0').
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters.stopReading">
            IN: If true(1), than after this read, the handle for the stream will be closed.
            Should be false if more CliReadStdErr calls will be made on this handle.
            If planning to read until eof, can be always true
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters.bytesRead">
            OUT: Amount of bytes read. 
            If amount is zero or less, all stream handles are closed.
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliReadStdErrParameters.buffer">
            IN/OUT: Buffer to read into, will return a null terminated string.
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliWriteStdInParameters">
            Input parameters for Cli Write Std In
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliWriteStdInParameters.size">
            IN: Call it with sizeof(struct XosaClientCliWriteStdInParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliWriteStdInParameters.contextHandle">
            IN: ContextHandle
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliWriteStdInParameters.buffer">
            IN: Input buffer
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliWriteStdInParameters.bufferSize">
            IN: Input buffer size
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliWriteStdInParameters.bytesWritten">
            OUT: Bytes written to STDIN
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliGetProcessEndStatusParameters">
            Input parameters for Cli CliGetProcessEndStatus
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetProcessEndStatusParameters.size">
            IN: Call it with sizeof(struct XosaClientCliGetProcessEndStatusParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetProcessEndStatusParameters.contextHandle">
            IN: The handle to the process.
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetProcessEndStatusParameters.processEnded">
            OUT: True(1) if the process ended, false(0) if it is still running
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliGetProcessEndStatusParameters.processExitVal">
            OUT: If the process ended, returns the process exit status
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliCloseHandleParameters">
            Input parameters for Cli Close Handle
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliCloseHandleParameters.size">
            IN: Call it with sizeof(struct XosaClientCliCloseHandleParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliCloseHandleParameters.handle">
            IN: The handle to the cli object
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliCloseHandleParameters.terminateCommand">
            IN: True(1) if the process ended, false(0) if it is still running
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliAddReadCallbacksParameters">
            Parameters for Cli Add Read Callbacks
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliAddReadCallbacksParameters.size">
            IN: Call it with sizeof(struct XosaClientCliAddReadCallbacksParameters)
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliAddReadCallbacksParameters.handle">
            IN: The handle to the cli object
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliAddReadCallbacksParameters.outCallback">
            IN: Callback to be called when new data on std out is available
        </member>
        <member name="F:xOSaClientNetLib.Cli.XosaClientCliAddReadCallbacksParameters.errCallback">
            IN: Callback to be called when new data on std err is available
        </member>
        <member name="T:xOSaClientNetLib.Cli.XosaClientCliApi">
            <summary>
            Client Driver API functions
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Cli.Redirection">
            <summary>
            Redirection configuration
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Cli.Redirection.Readnone">
            <summary>
            No redirection
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Cli.Redirection.Readstdout">
            <summary>
            Redirect only stdout
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Cli.Redirection.Readstderr">
            <summary>
            Redirect only stderr
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Cli.Redirection.Readstdouterr">
            <summary>
            Redirect stdout and stderr
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Cli.Redirection.WriteStdin">
            <summary>
            Redirect stdin
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Cli.Result">
            <summary>
            Incapsulation for CLI command result 
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Cli.Result.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="processExitVal"></param>
            <param name="stdoutResult"></param>
            <param name="stderrResult"></param>
            <param name="processFinished"></param>
        </member>
        <member name="P:xOSaClientNetLib.Cli.Result.ExitCode">
            <summary>
            Command exit code
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.Result.Stdout">
            <summary>
            Whole stdout output, if redirection was enabled
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.Result.Stderr">
            <summary>
            Whole stderr output, if redirection was enabled
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Cli.Result.ProcessFinished">
            <summary>
            Had process finished
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Driver">
            <summary>
            C# Wrapper for xOSa Driver API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.#ctor(xOSaClientNetLib.XosaClient,System.String)">
            <summary>
            Create driver object
            </summary>
            <param name="client">xOSa client</param>
            <param name="name">Platform specific driver name</param>
        </member>
        <member name="M:xOSaClientNetLib.Driver.#ctor(xOSaClientNetLib.XosaClient,System.Guid)">
            <summary>
            Create driver object from GUID
            </summary>
            <param name="client">xOSa client</param>
            <param name="guid">Driver name GUID, for Windows remote agents ONLY</param>
        </member>
        <member name="M:xOSaClientNetLib.Driver.LoggerAddCallMethod(System.String)">
            <summary>
            log calling of a method
            </summary>
            <param name="methodDescription">method name to be logged</param>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Enable">
            <summary>
            Enable driver
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Disable">
            <summary>
            Disable driver
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Open(xOSaClientNetLib.Driver.DriverMode)">
            <summary>
            Open connection to driver
            </summary>
            <param name="mode">Connection mode</param>
            <returns>Handle object</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Open(xOSaClientNetLib.Driver.DriverMode,xOSaClientNetLib.Driver.DriverDesiredAccess)">
            <summary>
            Open connection to driver
            </summary>
            <param name="mode">Connection mode</param>
            <param name="desiredAccess"></param>
            <returns>Handle object</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Poll(xOSaClientNetLib.Driver.Handle[],xOSaClientNetLib.Driver.Handle[],System.UInt32,xOSaClientNetLib.Driver.Handle[]@,xOSaClientNetLib.Driver.Handle[]@)">
            <summary>
            Poll handles for readiness
            </summary>
            <param name="readHandles">Read handles to poll, if don't required pass null</param>
            <param name="writeHandles">Write handles to poll, if don't required pass null</param>
            <param name="timeout">Timeout in milliseconds</param>
            <param name="readHandlesReady">Handles ready for read, if don't required pass null</param>
            <param name="writeHandlesReady">Handles ready for write, if don't required pass null</param>
        </member>
        <member name="P:xOSaClientNetLib.Driver.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverDisableParameters">
            Input parameters for DriverDisable
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverDisableParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverDisableParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverDisableParameters.driverName">
            IN: DriverNameBuffer \0 ending buffer with platform specific driver name. You need to specify full driver Hardware ID. In device manager, right click properties of the driver, set property to HW ID. set the value as driver name for xOSa Driver API. for example (Root\ioaccess).
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverDisableParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverEnableParameters">
            Input parameters for DriverEnable
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverEnableParameters.size">
            IN: Call it with sizeof(struct XosaClientDriverEnableParameters)
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverEnableParameters.driverName">
            IN: DriverNameBuffer \0 ending buffer with platform specific driver name. You need to specify full driver Hardware ID. In device manager, right click properties of the driver, set property to HW ID. set the value as driver name for xOSa Driver API. for example (Root\ioaccess).
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverEnableParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverGetStatusParameters">
            Input parameters for DriverGetStatus
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverGetStatusParameters.size">
            IN: Call it with sizeof(struct XosaClientDriverGetStatusParameters)
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverGetStatusParameters.driverName">
            IN: DriverNameBuffer \0 ending buffer with platform specific driver name
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverGetStatusParameters.driverStatus">
            OUT: Driver status
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters">
            Input parameters for DriverOpen
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverOpenParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters.driverName">
            IN: DriverNameBuffer \0 ending buffer with platform specific driver name  
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters.mode">
            IN: Mode driver to open. to be cost to DriverMode 
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters.handle">
            OUT: Handle, xOSa internal handle
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverOpenParameters.desiredAccess">
            IN: The requested access to the file or device, which can be summarized as read, write, both or neither zero).
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters">
            Input parameters for DriverIoctl
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverIoctlParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.handle">
            IN: Handle valid xOSa internal handle 
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.controlCode">
            IN: ControlCode, driver control code
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.inBuffer">
            IN: inBuffer input buffer
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.inBufferSize">
            IN: inBufferSize, input buffer size
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.outBuffer">
            IN: outBuffer output buffer
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.outBufferSize">
            IN: outBufferSize, output buffer size
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.timeout">
            IN: Timeout, in milliseconds
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.bytesReturned">
            OUT: BytesReturned, bytes written to outBuffer
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverIoctlParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverCloseParameters">
            Input parameters for DriverClose
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverCloseParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverCloseParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverCloseParameters.handle">
            IN: Valid xOSa internal handle 
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverCloseParameters.nativeErrorCode">
            OUT: Platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverReadParameters">
            Input parameters for DriverRead
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.size">
            IN: call it with sizeof(internal struct XosaClientDriverReadParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.handle">
            IN: Valid xOSa internal handle
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.bufferSize">
            IN: BufferSize, output buffer size
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.timeout">
            IN: Timeout, in milliseconds
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.buffer">
            IN/OUT: buffer, output buffer 
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.bytesRead">
            OUT: BytesRead, number of the bytes read
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters">
            Input parameters for DriverWrite
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverWriteParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.handle">
            IN: Valid xOSa internal handle
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.buffer">
            IN: InBuffer, input buffer
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.bufferSize">
            IN: BufferSize, input buffer size
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.timeout">
            IN: Timeout, in milliseconds
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.bytesWritten">
            OUT: Byteswritten, number of the bytes written
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverPollParameters">
            Input parameters for DriverPoll
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.size">
            IN: call it with sizeof(internal struct XosaClientDriverPollParameters)
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.readHandles">
            IN: array of valid xOSa internal handles
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.readHandlesLength">
            IN: read handles array size
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.writeHandles">
            IN: array of valid xOSa internal handles
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.writeHandlesLength">
            IN: write handles array size
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.timeout">
            IN: timeout in milliseconds
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.readHandlesReady">
            IN/OUT: ReadHandlesReady, array of handles ready for read, big enough to hold readHandlesLength
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.readHandlesReadyLength">
            OUT: number handles ready for read
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.writeHandlesReady">
            IN/OUT: writeHandlesReady, array of handles ready to write, big enough to hold writeHandlesLength
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverPollParameters.writeHandlesReadyLength">
            OUT: number handles ready for write
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters">
            Input parameters for DriverReadAsync
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters.size">
            IN: call it with sizeof(internal struct XosaClientDriverReadAsyncParameters)
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters.callback">
            IN: Callback, to be called when read operation finishes
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters.handle">
            IN: Handle, valid xOSa internal handle
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters.buffer">
            IN/OUT: OutBuffer, buffer to store data, should be valid until callback is called
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters.bytesToRead">
            IN: BytesToRead, bytes to read
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverReadAsyncParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters">
            Input parameters for DriverWriteAsync
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverWriteAsyncParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters.handle">
            IN: Handle, valid xOSa internal handle
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters.buffer">
            IN: InBuffer, input buffer
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters.bytesToWrite">
            IN: BytesToWrite, bytes to write
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters.callback">
            IN: Callback, to be called when write operation finishes
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverWriteAsyncParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverCancelIoParameters">
            Parameters for DriverCancelIo
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverCancelIoParameters.size">
            IN: Call it with sizeof(internal struct XosaClientDriverCancelIoParameters )
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverCancelIoParameters.handle">
            IN: Valid xOSa internal handle
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverCancelIoParameters.nativeErrorCode">
            OUT: Native error code
        </member>
        <member name="T:xOSaClientNetLib.Driver.XosaClientDriverApi">
            Client Driver API functions
        </member>
        <member name="F:xOSaClientNetLib.Driver.XosaClientDriverApi.size">
            call it with sizeof(struct XosaClientHeciApi)
        </member>
        <member name="T:xOSaClientNetLib.Driver.ReadAsyncCallback">
            <summary>
            Callback function called asynchronously when driver read completed
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Driver.WriteAsyncCallback">
            <summary>
            Callback function called asynchronously when driver write completed
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Driver.NativeError">
            Native error class
        </member>
        <member name="M:xOSaClientNetLib.Driver.NativeError.#ctor(System.UInt32)">
            <summary>
            Public constuctor
            </summary>
            <param name="code">Native error code value</param>
        </member>
        <member name="P:xOSaClientNetLib.Driver.NativeError.Code">
            <summary>
            Native error code value
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Driver.DriverMode">
            <summary>
            Supported driver modes: Block, NonBlock, Invalid
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Driver.DriverMode.DmBlock">
            <summary>
            Blocking mode
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Driver.DriverMode.DmNonblock">
            <summary>
            Non-blocking mode
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Driver.DriverMode.DmInvalid">
            <summary>
            Invalid mode
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Driver.DriverDesiredAccess.DriverOpenNoAccess">
            <summary>
            No Read/No Write 
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Driver.DriverDesiredAccess.DriverOpenRead">
            <summary>
            Read Only access
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Driver.DriverDesiredAccess.DriverOpenWrite">
            <summary>
            Write Only access
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:xOSaClientNetLib.Driver.DriverDesiredAccess.DriverOpenReadWrite" -->
        <member name="T:xOSaClientNetLib.Driver.Handle">
            <summary>
            xOSa wrapper class for internal handle
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.#ctor(xOSaClientNetLib.XosaClient,System.UInt32)">
            <summary>
            Constructor for Xosa Driver Handle
            Scope set to internal, see getter for XosaHandle
            </summary>
            <param name="client">xOSa client</param>
            <param name="xosaHandle"></param>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.IoControl(System.UInt32,System.Byte[],System.Byte[],System.UInt32)">
            <summary>
            Send IoControl to driver
            </summary>
            <param name="controlCode">Driver control code</param>
            <param name="inBuffer">Input buffer, if don't required pass null</param>
            <param name="outBuffer">Output buffer, if don't required pass null</param>
            <param name="timeout">timeout in milliseconds - infinite by default</param>
            <returns>Bytes returned to outBuffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.IoControl(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Send IoControl to driver
            </summary>
            <param name="controlCode">Driver control code</param>
            <param name="inBuffer">Input buffer, if don't required pass null</param>
            <param name="inBufferSize">Input buffer size</param>
            <param name="outBuffer">Output buffer, if don't required pass null</param>
            <param name="outBufferSize">Outbuffer buffer size</param>
            <param name="timeout">timeout in milliseconds - infinite by default</param>
            <returns>Bytes returned to outBuffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Close">
            <summary>
            Close handle
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Read(System.Byte[],System.UInt32)">
            <summary>
            Read from driver, read mode is defined during Open
            </summary>
            <param name="outBuffer">Output buffer</param>
            <param name="timeout">timeout in miliseconds, for NON_BLOCKING handles, pass 0 if not relevant</param>
            <returns>Bytes read to outBuffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Read(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Read from driver, read mode is defined during Open
            </summary>
            <param name="outBuffer">Output buffer</param>
            <param name="bufferSize">Output buffer size</param>
            <param name="timeout">timeout in miliseconds, for NON_BLOCKING handles, pass 0 if not relevant</param>
            <returns>Bytes read to outBuffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Read(System.Byte[],xOSaClientNetLib.Driver.ReadAsyncCallback)">
            <summary>
            Read from driver, in asyncronious mode 
            </summary>
            <param name="outBuffer">Output buffer, SHOULD be valid until callback is called </param>
            <param name="callback">callback to be called when read operation ends</param>
            <returns>on success nothing, exception thrown otherwise</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Read(System.Byte[],System.UInt32,xOSaClientNetLib.Driver.ReadAsyncCallback)">
            <summary>
            Read from driver, in asyncronious mode 
            </summary>
            <param name="outBuffer">Output buffer, SHOULD be valid until callback is called </param>
            <param name="bufferSize">Output buffer size </param>
            <param name="callback">callback to be called when read operation ends</param>
            <returns>on success nothing, exception thrown otherwise</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Write(System.Byte[],xOSaClientNetLib.Driver.WriteAsyncCallback)">
            <summary>
            Write to driver, in asyncronious mode 
            </summary>
            <param name="inBuffer">Input buffer</param>
            <param name="callback">callback to be called when write operation ends</param>
            <returns>on success nothing, exception thrown otherwise</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Write(System.Byte[],System.UInt32,xOSaClientNetLib.Driver.WriteAsyncCallback)">
            <summary>
            Write to driver, in asyncronious mode 
            </summary>
            <param name="inBuffer">Input buffer</param>
            <param name="bufferSize">Input buffer size</param>
            <param name="callback">callback to be called when write operation ends</param>
            <returns>on success nothing, exception thrown otherwise</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.CancelIo">
            <summary>
            Cancels all asyc IO operations that associated to this handle.
            The function only cancels I/O operations in the current process, 
            regardless of which thread created the I/O operation.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Write(System.Byte[],System.UInt32)">
            <summary>
            Write to driver, write mode is defined during Open
            </summary>
            <param name="inBuffer">Input buffer</param>
            <param name="timeout">timeout in miliseconds, for NON_BLOCKING handles, pass 0 if not relevant</param>
            <returns>Bytes written to driver</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Write(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Write to driver, write mode is defined during Open
            </summary>
            <param name="inBuffer">Input buffer</param>
            <param name="bufferSize">Input buffer size</param>
            <param name="timeout">timeout in miliseconds, for NON_BLOCKING handles, pass 0 if not relevant</param>
            <returns>Bytes written to driver</returns>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Dispose">
            <summary>
            IDisposable interface implementation
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Driver.Handle.Dispose(System.Boolean)">
            <summary>
            disposing is true when this function is called by IDisposable interface
            </summary>
            <param name="disposing">false when it is called by the Finalizer</param>
        </member>
        <member name="P:xOSaClientNetLib.Driver.Handle.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Driver.Handle.NativeErrorCode">
            <summary>
            Specifies last native error received from DUT
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Driver.Handle.XosaHandle">
            <summary>
            xOSa handle ReadOnly
            Setting arbitrary value to this handle could cause xOSa service crash
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.File">
            <summary>
            C# Wrapper for xOSa File API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.File.#ctor(xOSaClientNetLib.XosaClient)">
            <summary>
            Create file object 
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.File.Create(System.String,System.UInt64)">
            <summary>
            Create file 
            </summary>
            <param name="name">File name</param>
            <param name="size">File size</param>
        </member>
        <member name="M:xOSaClientNetLib.File.CreateDirectory(System.String)">
            <summary>
            Create directory
            </summary>
            <param name="name">Directory name</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Delete(System.String)">
            <summary>
            Delete file
            </summary>
            <param name="name">File name</param>
        </member>
        <member name="M:xOSaClientNetLib.File.RemoveDirectory(System.String,System.Boolean)">
            <summary>
            Remove directory
            </summary>
            <param name="name">Directory name</param>
            <param name="recursive">Recursive flag</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Exists(System.String)">
            <summary>
            Check for file existance
            </summary>
            <param name="name">File name</param>
        </member>
        <member name="M:xOSaClientNetLib.File.IsDirectory(System.String)">
            <summary>
            Check if name is directory
            </summary>
            <param name="name">file or directory name</param>
        </member>
        <member name="M:xOSaClientNetLib.File.GetInformation(System.String,xOSaClientNetLib.File.FileInformation)">
            <summary>
            Get file information
            </summary>
            <param name="name">File name</param>
            <param name="fileInfo">File Information class</param>
        </member>
        <member name="M:xOSaClientNetLib.File.GetInformation(System.String)">
            <summary>
            Get file information
            </summary>
            <param name="name">File name</param>
            <param name="fileInfo">File Information class</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Upload(System.String,System.String,xOSaClientNetLib.File.LongOperationStatusCallback)">
            <summary>
            Upload file
            </summary>
            <param name="localName">Local file name</param>
            <param name="remoteName">Remote file name</param>
            <param name="callback">Callback for progress notification</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Download(System.String,System.String,xOSaClientNetLib.File.LongOperationStatusCallback)">
            <summary>
            Download file
            </summary>
            <param name="remoteName">Remote file name</param>
            <param name="localName">Local file name</param>
            <param name="callback">Callback for progress notification</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Copy(System.String,System.String)">
            <summary>
            Copy file
            </summary>
            <param name="existingName">Source file name</param>
            <param name="newName">Destination name</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Move(System.String,System.String)">
            <summary>
            Move file
            </summary>
            <param name="existingName">Source file name</param>
            <param name="newName">Destination name</param>
        </member>
        <member name="M:xOSaClientNetLib.File.List(System.String,System.Boolean)">
            <summary>
            List files in the directory
            </summary>
            <param name="directoryName">directory to list</param>
            <param name="recursive">list recursively</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Open(System.String,xOSaClientNetLib.File.OpenMode)">
            <summary>
            Open file handle
            </summary>
            <param name="name">File name</param>
            <param name="mode">Open mode</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Close(System.Int32)">
            <summary>
            Closes file handle
            </summary>
            <param name="handle">file handle</param>
        </member>
        <member name="M:xOSaClientNetLib.File.Dispose">
            <summary>
            IDisposable interface implementation
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.File.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileCreateParameters">
            Input parameters for Cli File Create
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileCreateParameters)
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateParameters.fileName">
            IN: file name, absolute or relative to xOsa service working directory, creates all subdirectories on the path
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateParameters.perm">
            IN: perm file permissions - FOR FUTURE USE
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateParameters.fileSize">
            IN: file size
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateParameters.datetime">
            IN: datetime file date and time - FOR FUTURE USE
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileCreateDirectoryParameters">
            Input parameters for Cli File Create Directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateDirectoryParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileCreateDirectoryParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateDirectoryParameters.fileName">
            IN: Name directory name, absolute or relative to xOsa service working directory, creates all subdirectories on the path 
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateDirectoryParameters.perm">
            IN: Perm file permissions - FOR FUTURE USE
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCreateDirectoryParameters.dateTime">
            IN: Datetime file date and time  - FOR FUTURE USE
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileDeleteParameters">
             Input parameters for Cli File Delete
            
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileDeleteParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileDeleteParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileDeleteParameters.fileName">
            IN: Name file name, absolute or relative to xOsa service working directory
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileRemoveDirectoryParameters">
            Input parameters for Cli File Remove Directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileRemoveDirectoryParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileRemoveDirectoryParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileRemoveDirectoryParameters.fileName">
            IN: Name file name, absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileRemoveDirectoryParameters.recursive">
            IN: Recursive bool recursive flag
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileExistsParameters">
             Input parameters for Cli FileExists
            
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileExistsParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileExistsParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileExistsParameters.fileName">
            IN: File name, absolute or relative to xOsa service working directory
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileIsDirectoryParameters">
            Input parameters for Cli FileIsDirectory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileIsDirectoryParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileIsDirectoryParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileIsDirectoryParameters.fileName">
            IN: File name, absolute or relative to xOsa service working directory
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileGetInformationParameters">
            Input parameters for Cli FileGetInformation
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileGetInformationParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileGetInformationParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileGetInformationParameters.fileName">
            IN: File name, absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileGetInformationParameters.perm">
            IN/OUT: permission buffer 
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileGetInformationParameters.fileSize">
            OUT: Size
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileGetInformationParameters.dateTime">
            IN/OUT: Datetime buffer
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileCopyParameters">
            Input parameters for Cli FileCopy
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCopyParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileCopyParameters)
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCopyParameters.existingName">
            IN: Existing file name, absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCopyParameters.newName">
            IN: New file name, absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCopyParameters.newPerm">
            IN: New file permissions
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileCopyParameters.newDateTime">
            IN: New file date and time
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileMoveParameters">
            Input parameters for Cli FileMove
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileMoveParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileMoveParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileMoveParameters.existingName">
            IN: Existing file name, absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileMoveParameters.newName">
            IN: New file name, absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileMoveParameters.newPerm">
            IN: New file permissions
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileMoveParameters.newDateTime">
            IN: New file date and time
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileWriteParameters">
            Input parameters for Cli FileWrite
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileWriteParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileWriteInParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileWriteParameters.fileName">
            IN: File name, absolute or relative to xOsa service working directory, creates all subdirectories on the path
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileWriteParameters.buffer">
            IN: Buffer data to write
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileWriteParameters.bufferSize">
            IN: Data size
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileWriteParameters.offset">
            IN: Offset in the file
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileWriteParameters.bytesWritten">
            OUT: Bytes written
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileReadParameters">
            Input parameters for Cli FileRead
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileReadParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileReadInParameters )
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileReadParameters.fileName">
            IN: File name, absolute or relative to xOsa service working directory, creates all subdirectories on the path
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileReadParameters.buffer">
            IN: Buffer data to read
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileReadParameters.bufferSize">
            IN: Data size
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileReadParameters.offset">
            IN: Offset in the file
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileReadParameters.bytesRead">
            OUT: Bytes read
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileUploadParameters">
            Input parameters for Cli FileUpload
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileUploadParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileUploadParameters)
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileUploadParameters.localName">
            IN: file name, absolute or relative to working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileUploadParameters.remoteName">
            IN: file name, absolute or relative to xOsa service working directory, creates all subdirectories on the path
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileUploadParameters.remotePerm">
            IN: file permissions - FOR FUTURE USE
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileUploadParameters.remoteDatetime">
            IN: file date and time - FOR FUTURE USE
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileUploadParameters.callback">
            IN: progress callback, (relevant for files > 2M), should be NULL if not interested 
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileDownloadParameters">
            Input parameters for Cli FileDownload
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileDownloadParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileDownloadParameters)
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileDownloadParameters.remoteName">
            IN: file name, absolute or relative to xOsa service working directory, creates all subdirectories on the path
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileDownloadParameters.localName">
            IN: file name, absolute or relative to working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileDownloadParameters.callback">
            IN: progress callback, (relevant for files > 2M), should be NULL if not interested 
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileListParameters">
            Input parameters for Cli FileList
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileListParameters.size">
            IN: Cal it with sizeof(struct XosaClientFileListParameters)
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileListParameters.dirName">
            IN: Directory name; absolute or relative to xOsa service working directory
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileListParameters.fileListSize">
            IN/OUT after return parameter contains number of bytes used ( or required in the case XOSA_RES_SMALL_BUFFER)
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileListParameters.recursive">
            IN: recursive flag
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileListParameters.filesList">
            INOUT: memory to store the list of files data.
        </member>
        <member name="T:xOSaClientNetLib.File.XosaClientFileApi">
            <summary>
            Client Driver API functions
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.File.XosaClientFileApi.size">
            call it with sizeof(struct XosaClientFileApi)
        </member>
        <member name="T:xOSaClientNetLib.File.LongOperationStatusCallback">
            <summary>
            Progress callback
            </summary>
            <param name="progress">Upload progress from 0 to 100</param>
            <returns>0 continue upload, any other value will stop upload and return error from UploadFile</returns>
            
        </member>
        <member name="T:xOSaClientNetLib.File.FileInformation">
            <summary>
            File information 
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.File.FileInformation.Permissions">
            <summary>
            File permissions, FOR FUTURE USE
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.File.FileInformation.Size">
            <summary>
            File size
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.File.FileInformation.Datetime">
            <summary>
            File datetime, FOR FUTURE USE
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.AllocationExParam">
            <summary>
            struct used for request allocation of memory buffer
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.AllocationExParam.LowestAcceptableAddress">
            IN: The lowest valid physical address the caller can use
        </member>
        <member name="F:xOSaClientNetLib.AllocationExParam.HighestAcceptableAddress">
            IN: The highest valid physical address the caller can use
        </member>
        <member name="F:xOSaClientNetLib.AllocationExParam.physicalAddr">
            OUT: The physical address of the allocated buffer
        </member>
        <member name="F:xOSaClientNetLib.AllocationExParam.bytesToAlloc">
            IN: number of bytes to allocate
        </member>
        <member name="F:xOSaClientNetLib.AllocationExParam.alignMask">
            IN: Alignment boundary in k IGNORED. Possible inputs: 0 - default(4k), 4, 8, 16, 32, 64, 128.        
        </member>
        <member name="T:xOSaClientNetLib.Memory">
            <summary>
            C# Wrapper for xOSa Memory API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Memory.ReadPhysicalAddress(System.UInt64,System.UInt32)">
            <summary>
            Reads memory from a physical address
            </summary>
            <param name="srcAddr">src address in kernel memory to read from</param>
            <param name="readAmount">the amount of bytes to read</param>
            <returns>byte array with the memory read</returns>
        </member>
        <member name="M:xOSaClientNetLib.Memory.WritePhysicalAddress(System.Byte[],System.UInt64)">
            <summary>
            Write bytes to physical kernel memory 
            </summary>
            <param name="buffer">buffer of bytes to write</param>
            <param name="destAddr">address to write into</param>
        </member>
        <member name="M:xOSaClientNetLib.Memory.AllocPhysicalNonPaged(System.UInt32,System.UInt32)">
             <summary>
             Allocates a non paged buffer. Returns the physical address of the allocated buffer
             </summary>
             <param name="bufferSize">size of buffer to allocate</param>
             <param name="alignMask">alignment boundary in k. possible inputs:
            0 - default(4k), 4, 8, 16, 32, 64, 128.</param>
             <returns>the physical address of the allocated buffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Memory.AllocPhysicalNonPagedEx(xOSaClientNetLib.AllocationExParam@)">
             <summary>
             Allocates a non paged buffer. Returns the physical address of the allocated buffer
             </summary>
            <param name="param"></param>
            <returns>the physical address of the allocated buffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Memory.FreePhysicalNonPaged(System.UInt64)">
            <summary>
            Frees a non paged buffer allocated by Memory.AllocPhysicalNonPaged.
            </summary>
            <param name="physicalAddr">physical address of the buffer to free</param>
        </member>
        <member name="P:xOSaClientNetLib.Memory.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedParameters">
            Input parameters for MemoryAllocPhysicalNonPaged
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedParameters.size">
            IN: call it with sizeof(struct XosaClientMemoryAllocPhysicalNonPagedParameters)
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedParameters.bufferSize">
            IN: size of the memory buffer
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedParameters.alignMask">
            IN: mask indicating Alignment boundary in k
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedParameters.physicalAddr">
            OUT: The physical address of the memory
        </member>
        <member name="T:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedExParameters">
            Input parameters for MemoryAllocPhysicalNonPagedEx
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedExParameters.size">
            IN: call it with sizeof(struct XosaClientMemoryAllocPhysicalNonPagedExParameters)
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryAllocPhysicalNonPagedExParameters.paramSt">
            IN/OUT: physical address of the buffer to free
        </member>
        <member name="T:xOSaClientNetLib.Memory.XosaClientMemoryFreePhysicalNonPagedParameters">
            Input parameters for MemoryFreePhysicalNonPaged
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryFreePhysicalNonPagedParameters.size">
            IN: call it with sizeof(struct XosaClientMemoryFreePhysicalNonPagedParameters)
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryFreePhysicalNonPagedParameters.physicalAddr">
            IN: holds the physicalAddr of the memory to free
        </member>
        <member name="T:xOSaClientNetLib.Memory.XosaClientMemoryReadPhysicalAddressParameters">
            Input parameters for MemoryReadPhysicalAddress
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryReadPhysicalAddressParameters.size">
            IN: call it with sizeof(struct XosaClientMemoryReadPhysicalAddressParameters)
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryReadPhysicalAddressParameters.srcAddr">
            IN: physical source address to copy from
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryReadPhysicalAddressParameters.bufferSize">
            IN: the size of data requesting to copy
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryReadPhysicalAddressParameters.buffer">
            IN/OUT: byte array to copy the result to
        </member>
        <member name="T:xOSaClientNetLib.Memory.XosaClientMemoryWritePhysicalAddressParameters">
            Input parameters for MemoryWritePhysicalAddress
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryWritePhysicalAddressParameters.size">
            IN: call it with sizeof(struct XosaClientMemoryWritePhysicalAddressParameters)
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryWritePhysicalAddressParameters.buffer">
            IN: data to copy to memory
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryWritePhysicalAddressParameters.destAddr">
            IN:  physical destination address to write to
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryWritePhysicalAddressParameters.bufferSize">
            IN: the size of data requesting to write
        </member>
        <member name="T:xOSaClientNetLib.Memory.XosaClientMemoryApi">
            Client Memory API functions
        </member>
        <member name="F:xOSaClientNetLib.Memory.XosaClientMemoryApi.size">
            call it with sizeof(struct XosaClientMemoryApi)
        </member>
        <member name="T:xOSaClientNetLib.Pci">
            <summary>
            C# Wrapper for xOSa Pci API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Pci.#ctor(xOSaClientNetLib.XosaClient,System.UInt16,System.UInt16)">
            <summary>
            Initiates a new Pci instance.
            If client is not initialized throws an exception
            </summary>
            <param name="client">xOSa client</param>
            <param name="vendorId">Vendor ID of Pci device</param>
            <param name="deviceId">Device ID of Pci device</param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.#ctor(xOSaClientNetLib.XosaClient,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initiates a new Pci instance.
            If client is not initialized throws an exception
            </summary>
            <param name="client">xOSa client</param>
            <param name="bus">bus of Pci device</param>
            <param name="device">device of Pci device</param>
            <param name="function">function of Pci device</param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.GetDevices(xOSaClientNetLib.XosaClient)">
            <summary>
            List of PCI devices found in the system
            </summary>
            <returns>The list of PCI devices found in the system</returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.GetLocation(System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Returns the Bus, Device and Function of this pci device
            </summary>
            <param name="bus">bus</param>
            <param name="device">device</param>
            <param name="function">function</param>
        </member>
        <member name="M:xOSaClientNetLib.Pci.GetDeviceConfigSpace">
            <summary>
            Returns the device config space
            </summary>
            <returns>the whole config space of the device</returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.ReadDwordConfigSpace(System.UInt32)">
            <summary>
            Read DwordConfigSpace
            </summary>
            <param name="bus">pci location bus</param>
            <param name="device">pci location device</param>
            <param name="function">pci location function</param>
            <param name="offset">offset from config space start to read from </param>
        </member>
        <member name="M:xOSaClientNetLib.Pci.WriteDwordConfigSpace(System.UInt32,System.UInt32)">
            <summary>
            Read DwordConfigSpace
            </summary>
            <param name="bus">pci location - bus</param>
            <param name="device">pci location - device</param>
            <param name="function">pci location - function</param>
            <param name="offset">offset from config space start to write to </param>
            <param name="data">data to write </param>
        </member>
        <member name="M:xOSaClientNetLib.Pci.GetCurrentBars">
            <summary>
            Returns the current Bars values in the config space
            </summary>
            <returns>the current Bars values in the config space</returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.GetCurrentFwsts1">
            <summary>
            Returns FW Status 1 value
            </summary>
            <returns>FWSTS1 value in the config space</returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.GetCurrentFwsts2">
            <summary>
            Returns FW Status 2 value
            </summary>
            <returns>FWSTS2 value in the config space</returns>
        </member>
        <member name="M:xOSaClientNetLib.Pci.ReadDwordFromBarWithOffset(System.Int32,System.Int32)">
            <summary>
            Read 4 bytes from the requested bar address, with offset
            </summary>
            <param name="bar">the bar to read from, is between 0 and 5</param>
            <param name="offset">offset to read from the derefrence of bar address</param>
            <returns>the bytes read</returns>
        </member>
        <member name="P:xOSaClientNetLib.Pci.VendorId">
            <summary>
            The Vendor ID of this device
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Pci.DeviceId">
            <summary>
            The Device ID of this device
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Pci.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciGetNumOfDevicesParameters">
            Input parameters for Pci GetNumOfDevices command API
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetNumOfDevicesParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetNumOfDevicesParameters)
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetNumOfDevicesParameters.numOfDevices">
            OUT: number of devices found
        </member>
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciGetDeviceListParameters">
            Input parameters for Pci GetDeviceList command API
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceListParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetDeviceListParameters)
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceListParameters.listLength">
            IN: how many device identities list buffer can receive
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceListParameters.list">
            INOUT: buffer to store found device identities
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceListParameters.numOfDevices">
            OUT: num of device identities written into list
        </member>
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciGetDeviceConfigSpaceParameters">
            Input parameters for Pci GetDeviceConfigSpace command API
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceConfigSpaceParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetDeviceConfigSpaceParameters)
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceConfigSpaceParameters.pciLocation">
            IN: struct containing  (Bus, Device, Function) of Pci device
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciGetDeviceConfigSpaceParameters.pciDevice">
            OUT: pointer to Pci config space of pci device
        </member>
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciReadDwordConfigSpaceParameters">
            Input parameters for Pci ReadDwordConfigSpace command API
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciReadDwordConfigSpaceParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetDeviceConfigSpaceParameters)
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciReadDwordConfigSpaceParameters.pciLocation">
            IN: struct containing  (Bus, Device, Function) of Pci device
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciReadDwordConfigSpaceParameters.offset">
            IN: config space offset to read data
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciReadDwordConfigSpaceParameters.data">
            OUT: pointer to the requested data
        </member>
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciWriteDwordConfigSpaceParameters">
            Input parameters for Pci WriteDwordConfigSpace command API
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciWriteDwordConfigSpaceParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetDeviceConfigSpaceParameters)
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciWriteDwordConfigSpaceParameters.pciLocation">
            IN: struct containing  (Bus, Device, Function) of Pci device
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciWriteDwordConfigSpaceParameters.offset">
            IN: config space offset to read data
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciWriteDwordConfigSpaceParameters.data">
            OUT: pointer to the requested data
        </member>
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciFindDeviceParameters">
            Input parameters for Pci FindDevice command API
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciFindDeviceParameters.size">
            IN: call it with sizeof(struct XosaClientPciFindDeviceParameters)
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciFindDeviceParameters.vendorId">
            IN: vendor ID of the requested Pci device
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciFindDeviceParameters.deviceId">
            IN: device ID of the requested Pci device
        </member>
        <!-- Badly formed XML comment ignored for member "F:xOSaClientNetLib.Pci.XosaClientPciFindDeviceParameters.pciLocation" -->
        <member name="T:xOSaClientNetLib.Pci.XosaClientPciApi">
            Client Pci API functions
        </member>
        <member name="F:xOSaClientNetLib.Pci.XosaClientPciApi.size">
            call it with sizeof(struct XosaClientPciApi)
        </member>
        <member name="T:xOSaClientNetLib.Pci.PciLocation">
             Contains The bits required to address the PCI function configuration space.
        </member>
        <member name="F:xOSaClientNetLib.Pci.PciLocation.Bus">
            IN: 8-bit PCI bus
        </member>
        <member name="F:xOSaClientNetLib.Pci.PciLocation.Device">
            IN: 5-bit device
        </member>
        <member name="F:xOSaClientNetLib.Pci.PciLocation.Function">
            IN: 3-bit function numbers for the device 
        </member>
        <member name="T:xOSaClientNetLib.Pci.PciIdentity">
            Identifies a PCI function
        </member>
        <member name="F:xOSaClientNetLib.Pci.PciIdentity.Location">
            IN: contains the Bus,Device,Function bits
        </member>
        <member name="F:xOSaClientNetLib.Pci.PciIdentity.VendorId">
            IN: Vendor ID of PCI device
        </member>
        <member name="F:xOSaClientNetLib.Pci.PciIdentity.DeviceId">
            IN: PCI device ID
        </member>
        <member name="T:xOSaClientNetLib.IoPort">
            <summary>
            C# Wrapper for xOSa IoPort API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.IoPort.#ctor(xOSaClientNetLib.XosaClient)">
            <summary>
            Initiates a new Ioport instance.
            If client is not initialized throws an exception
            </summary>
            <param name="client">xOSa client</param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.IoPort.Read(System.UInt32)">
            <summary>
            Read IoPort
            </summary>
            <param name="address">address</param>
            <param name="data">data</param>
        </member>
        <member name="M:xOSaClientNetLib.IoPort.Write(System.UInt32,System.Byte)">
            <summary>
            Write IoPort
            </summary>
            <param name="address">address</param>
            <param name="data">data</param>
        </member>
        <member name="P:xOSaClientNetLib.IoPort.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.IoPort.XosaClientIoPortReadParameters">
            Input parameters for IoPort Read command API
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortReadParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetNumOfDevicesParameters)
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortReadParameters.address">
            IN: call it with sizeof(struct XosaClientPciGetNumOfDevicesParameters)
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortReadParameters.data">
            OUT: pointer to the requested data
        </member>
        <member name="T:xOSaClientNetLib.IoPort.XosaClientIoPortWriteParameters">
            Input parameters for IoPort Write command API
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortWriteParameters.size">
            IN: call it with sizeof(struct XosaClientPciGetNumOfDevicesParameters)
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortWriteParameters.address">
            IN: call it with sizeof(struct XosaClientPciGetNumOfDevicesParameters)
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortWriteParameters.data">
            IN: pointer to the requested data
        </member>
        <member name="T:xOSaClientNetLib.IoPort.XosaClientIoPortApi">
            Client IoPort API functions
        </member>
        <member name="F:xOSaClientNetLib.IoPort.XosaClientIoPortApi.size">
            call it with sizeof(struct XosaClientPciApi)
        </member>
        <member name="T:xOSaClientNetLib.Heci">
            <summary>
            C# Wrapper for xOSa Heci API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Heci.#ctor(xOSaClientNetLib.XosaClient,System.Guid)">
            <summary>
            Initiates Heci connection with FW.
            Returns a handle to Heci, that maintains state
            </summary>
            <param name="client">xOSa client</param>
            <param name="guid">GUID for the heci connection </param>
            <returns>Handle to Heci</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.Dispose">
            <summary>
             IDisposable member
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Heci.Close">
            <summary>
            An alias to Dispose
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Heci.Dispose(System.Boolean)">
            <summary>
            disposing is true when this function is called by IDisposable interface
            </summary>
            <param name="disposing">false when it is called by the Finalizer</param>
        </member>
        <member name="M:xOSaClientNetLib.Heci.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Heci.ReceiveMessage(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Receive message from heci buffer
            </summary>
            <param name="outBuffer">The buffer that the received message is written to</param>
            <param name="bufferLen">size of the outBuffer</param>
            <param name="timeout">timeout of heci to write the message in milisecs</param>
            <returns>The amount of bytes read into the buffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.ReceiveMessage(System.Byte[],System.UInt32)">
            <summary>
            Receive message from heci buffer
            </summary>
            <param name="outBuffer">The buffer that the received message is written to</param>
            <param name="timeout">timeout of heci to write the message in milisecs</param>
            <returns>The amount of bytes read into the buffer</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.SendMessage(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Write a message to heci from the buffer
            </summary>
            <param name="buffer">buffer to be written to heci</param>
            <param name="length">size of buffer</param>
            <param name="timeout">timeout to write the message to heci in milisecs</param>
            <returns>The amount of bytes written to heci</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.SendMessage(System.Byte[],System.UInt32)">
            <summary>
            Write a message to heci from the buffer
            </summary>
            <param name="buffer">buffer to be written to heci</param>
            <param name="timeout">timeout to write the message to heci in milisecs</param>
            <returns>The amount of bytes written to heci</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.GetBufferSize">
            <summary>
            Returns the heci maximum buffer size
            </summary>
            <returns> heci maximum buffer size</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.IsSignaled">
            <summary>
            Checks if an Asyncronous event notification was received from  Heci client with specified handle
            </summary>
            <returns> the number of notifications received from client</returns>
        </member>
        <member name="M:xOSaClientNetLib.Heci.RegisterToAsyncEvent">
            <summary>
            Registers for receiving Asyncronous event notification from Heci client with specified handle
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Heci.ClientGuid">
            <summary>
            The client Guid
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Heci.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciInitParameters">
            Input parameters for HeciInit
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciInitParameters.size">
            IN: call it with sizeof(struct XosaClientHeciInitParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciInitParameters.guid">
            IN: the GUID to init the connection from 
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciInitParameters.resultHandle">
            OUT: the result handle
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciInitParameters.nativeErrorCode">
            OUT: NativeErrorCode, platform specific error code
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters">
            Input parameters for HeciSendMessage
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters.size">
            IN: call it with sizeof(struct XosaClientHeciSendMessageParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters.handle">
            IN: the handle for Heci connection
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters.buffer">
            IN: the buffer to send
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters.length">
            IN: buffer length 
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters.timeout">
            IN: the connection timeout, in milliseconds, for infitite timeout use XOSA_TIMEOUT_INFINITE 
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciSendMessageParameters.bytesWritten">
            OUT: amount of bytes written from the buffer
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciDeinitParameters">
            Input parameters for HeciDeinit
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciDeinitParameters.size">
            IN: call it with sizeof(struct XosaClientHeciDeinitParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciDeinitParameters.handle">
            IN: the handle to the Heci connection
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciGetBufferSizeParameters">
            Input parameters for HeciGetBufferSize
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciGetBufferSizeParameters.size">
            IN: call it with sizeof(struct XosaClientHeciGetBufferSizeParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciGetBufferSizeParameters.handle">
            IN: the handle for Heci connection
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciGetBufferSizeParameters.result">
            OUT: the buffer size
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters">
            Input parameters for HeciReceiveMessage
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters.size">
            IN: call it with sizeof(struct XosaClientHeciReceiveMessageParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters.handle">
            IN: the handle for Heci connection
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters.bufferLen">
            IN: buffer length
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters.timeout">
            IN: the connection timeout, in milliseconds, for infitite timeout use XOSA_TIMEOUT_INFINITE
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters.bytesRead">
            OUT: the amount of bytes read into the buffer outBuffer
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciReceiveMessageParameters.outBuffer">
            INOUT: the output buffer that will contain data from Heci
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciCheckIfSignaledParameters">
            Input parameters for HeciCheckIfSignaled
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciCheckIfSignaledParameters.size">
            IN: Call it with sizeof(struct XosaClientHeciGetStatusParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciCheckIfSignaledParameters.handle">
            IN: In Windows it returns the number of notifications sent by the client with the specified handle.
                In Linux we get the number of notifications thrown by all clients. Needs to be set to handle of one of the clients. 
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciCheckIfSignaledParameters.haveNotification">
            OUT: flag indicating if the heci was signaled since the last registration
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciRegisterToAsyncEventParameters">
            Input parameters for HeciRegisterToAsyncEvent
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciRegisterToAsyncEventParameters.size">
            IN: Call it with sizeof(struct XosaClientHeciRegisterToAsyncEventParameters)
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciRegisterToAsyncEventParameters.handle">
            IN: Handle valid xOSa internal handle to the heci client that we want to catch its events
        </member>
        <member name="T:xOSaClientNetLib.Heci.XosaClientHeciApi">
            Client Heci API functions
        </member>
        <member name="F:xOSaClientNetLib.Heci.XosaClientHeciApi.size">
            call it with sizeof(struct XosaClientHeciApi)
        </member>
        <member name="T:xOSaClientNetLib.Plugin">
            <summary>
            Unused - Needed only for native compitability - C# Wrapper for xOSa Plugin API
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Plugin.XosaClientPluginApi">
            Unused - Needed only for native compitability - Client Plugin API functions
        </member>
        <member name="F:xOSaClientNetLib.Plugin.XosaClientPluginApi.size">
            call it with sizeof(struct XosaClientPciApi)
        </member>
        <member name="T:xOSaClientNetLib.Power">
            <summary>
            C# Wrapper for xOSa Power API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.Restart">
            <summary>
            Restarts the computer
            Performing reset asyncronously. The client will receive result OK, 
            and the reset will be executed.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.WarmReset">
            <summary>
            Warm reset the computer
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.ColdReset">
            <summary>
            Cold reset the computer
            Performing cold reset asyncronously. The client will receive result OK, 
            and the reset will be executed.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.GlobalReset">
            <summary>
            Global reset the computer
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.S3">
            <summary>
            Puts the DUT computer into S3 (sleep) state.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.S3(System.Int32)">
            <summary>
            Puts the DUT computer into S3 (sleep) state.
            The flow will be:
            1.	First, before executing this power action, xOSa sleeps for 5 seconds. It can be configured in xosa.config file, in the field: "powerWaitBeforeActionSecs"
            2.	After that xOSa starts an "alarm" that will wake up the system, it sets to the given duration.
            3.	After that xOSa calls the system call that signals the system to go into S3.
            The system takes time to go into S3. If the duration time is less from that time, the behave is depends on the OS implementation.
            Important mark: when the system wakes up, there is no guaranty that the screen will turn on
            </summary>
            <param name="duration">Duration of the "alarm" that wakes the system from S3. 
            The alarm is set right before the system call that signals the system to go in to S3 state</param>
        </member>
        <member name="M:xOSaClientNetLib.Power.S4">
            <summary>
            Puts the DUT computer into S4 (hibernate) state.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.S4(System.Int32)">
            <summary>
            Puts the DUT computer into S4 (hibernate) state.
            The flow will be:
            1.	First, before executing this power action, xOSa sleeps for 5 seconds. It can be configured in xosa.config file, in the field: "powerWaitBeforeActionSecs"
            2.	After that xOSa starts an "alarm" that will wake up the system, it sets to the given duration.
            3.	After that xOSa calls the system call that signals the system to go into S4.
            The system takes time to go into S4. If the duration time is less from that time, the behave is depends on the OS implementation.
            Important mark: when the system wakes up, there is no guaranty that the screen will turn on
            </summary>
            <param name="duration">Duration of the "alarm" that wakes the system from S4. 
            The alarm is set right before the system call that signals the system to go in to S4 state</param>
        </member>
        <member name="M:xOSaClientNetLib.Power.S5">
            <summary>
            Shuts the computer down from the OS
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.SwitchState(System.Int32)">
            <summary>
            Moves the computer to state X.
            Currently supports S0 (Restart), S3, S4, S5.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Power.IsOSUp">
            <summary>
            Checks if OS is up, so see if has recovered from Power change
            </summary>
            <returns><c>true</c> if OS is up</returns>
        </member>
        <member name="P:xOSaClientNetLib.Power.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerS4Parameters">
            Input parameters for Power S4 command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerS4Parameters.size">
            IN: call it with sizeof(struct XosaClientPowerS4Parameters)
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerS4Parameters.duration">
            IN: duration in seconds for the DUT to be in S4 state
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerIsOsUpParameters">
            Input parameters for Power IsOsUp command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerIsOsUpParameters.size">
            IN: call it with sizeof(struct XosaClientPowerIsOsUpParameters)
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerRestartParameters">
            Input parameters for Power Restart command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerRestartParameters.size">
            IN: call it with sizeof(struct XosaClientPowerRestartParameters)
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerSwitchStateParameters">
            Input parameters for Power Switch State command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerSwitchStateParameters.size">
            IN: call it with sizeof(struct XosaClientPowerSwitchStateParameters)
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerSwitchStateParameters.stateX">
            IN: power state to switch to
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerS3Parameters">
            Input parameters for Power S3 command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerS3Parameters.size">
            IN: call it with sizeof(struct XosaClientPowerS3Parameters)
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerS3Parameters.duration">
            IN: duration in seconds for the DUT to be in S3 state
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerS5Parameters">
            Input parameters for Power S5 command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerS5Parameters.size">
            IN: call it with sizeof(struct XosaClientPowerS5Parameters)
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerWarmResetParameters">
            Input parameters for Power Warm Reset command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerWarmResetParameters.size">
            IN: call it with sizeof(struct XosaClientPowerWarmResetParameters)
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerColdResetParameters">
            Input parameters for Power Cold Reset command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerColdResetParameters.size">
            IN: call it with sizeof(struct XosaClientPowerColdResetParameters)
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerGlobalResetParameters">
            Input parameters for Power Global Reset command API
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerGlobalResetParameters.size">
            IN: call it with sizeof(struct XosaClientPowerGlobalResetParameters)
        </member>
        <member name="T:xOSaClientNetLib.Power.XosaClientPowerApi">
            Client Power API functions
        </member>
        <member name="F:xOSaClientNetLib.Power.XosaClientPowerApi.size">
            IN: call it with sizeof(struct XosaClientPowerApi)
        </member>
        <member name="T:xOSaClientNetLib.Process">
            <summary>
            C# Wrapper for xOSa Process API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.EnumerateProcesses(xOSaClientNetLib.XosaClient,System.String)">
             <summary>
             Enumerate available processes with given filter
             </summary>
            <param name="client"></param>
            <param name="filter">
             string in format: {ProcessInformation.field_name=value} 
             Examples: 
            	    {Id=890}
            	    {Name="my notepad.exe"}
             </param>
             <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.Process.#ctor(xOSaClientNetLib.XosaClient)">
            <summary>
            Initiates a new Process instance.
            If client is not initialized throws an exception
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.EnumerateProcesses">
            <summary>
            Enumerate available processes 
            </summary>
            <returns>Processes list</returns>
        </member>
        <member name="M:xOSaClientNetLib.Process.GetProc(System.UInt64,System.String,System.String,System.String,xOSaClientNetLib.Process.Proc.MemoryInfo,xOSaClientNetLib.Process.Proc.ThreadInfo,xOSaClientNetLib.Process.Proc.FileInfo)">
            <summary>Get instance of a specific process</summary>
            <param name="id">Process Id</param>
            <param name="name">Process name</param>
            <param name="commandLine">Process command line</param>
            <param name="currentWorkingDirectory">Process current working directory</param>
            <param name="memoryInfo"></param>
            <param name="threadInfo"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:xOSaClientNetLib.Process.EnumerateServices(xOSaClientNetLib.XosaClient,System.String)">
            <summary>
            
            </summary>
            <param name="client">xOSa client</param>
            <param name="filter">
            string in format: {ServiceInformation.field_name=value}
            Examples: 
            	{Name="zygote"} 
            	{State=1}
            </param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.Process.EnumerateServices">
            <summary>
            Enumerate available services
            </summary>
            <returns>Services list</returns>
        </member>
        <member name="M:xOSaClientNetLib.Process.GetService(System.String,xOSaClientNetLib.Process.Service.ServiceState,xOSaClientNetLib.Process.Service.ServiceStatus,System.String,System.Collections.Generic.IEnumerable{xOSaClientNetLib.Process.Proc})">
            <summary>Get instance of a specific process</summary>
            <param name="name">Service Name</param>
            <param name="state">Service state</param>
            <param name="status">Service status</param>
            <param name="description">Service description</param>
            <param name="procs">Underlying process</param>
        </member>
        <member name="T:xOSaClientNetLib.Process.TimeoutException">
            <summary>
            Service timeout exception
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.TimeoutException.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:xOSaClientNetLib.Process.Proc">
            <summary>
            Process class
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Proc.#ctor(xOSaClientNetLib.XosaClient,System.UInt64,System.String,System.String,System.String,xOSaClientNetLib.Process.Proc.MemoryInfo,xOSaClientNetLib.Process.Proc.ThreadInfo,xOSaClientNetLib.Process.Proc.FileInfo)">
            <summary>
            Public constructor
            </summary>
            <param name="client">xOSa client</param>
            <param name="id">Process Id</param>
            <param name="name">Process name</param>
            <param name="commandLine">Process command line</param>
            <param name="currentWorkingDirectory">Process current working directory</param>
            <param name="memoryInfo"></param>
            <param name="threadInfo"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:xOSaClientNetLib.Process.Proc.#ctor(xOSaClientNetLib.Process.Proc)">
            <summary>
            Public copy constructor
            </summary>
            <param name="other">Other process</param>
        </member>
        <member name="M:xOSaClientNetLib.Process.Proc.Terminate">
            <summary>
            Terminate process
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Proc.Reload">
            <summary>
            Reload process information
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.Id">
            <summary>
            Process Id
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.CurrentWorkingDirectory">
            <summary>
            Process current working directory
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.Name">
            <summary>
            Process name
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.CommandLine">
            <summary>
            Process command line
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.Threads">
            <summary>
            Process threads
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.Files">
            <summary>
            Process files
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.Memory">
            <summary>
            Memory information
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Proc.Unmanaged">
            <summary>
            Helper class to correctly read unmanaged data
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Proc.ThreadInfo">
            <summary>
            Information about process threads
            FOR FUTURE USE
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Proc.FileInfo">
            <summary>
            Information about process files
            FOR FUTURE USE
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Proc.MemoryInfo">
            <summary>
            Information about process memory
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Proc.MemoryInfo.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Public constructor
            </summary>
            <param name="virtual">Virtual memory size in bytes</param>
            <param name="private">Private memory set size in bytes</param>
            <param name="physical">Physical memory size in bytes</param>
            <param name="workingSet">Working set size in bytes</param>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.MemoryInfo.Virtual">
            <summary>
            Virtual memory size in bytes
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.MemoryInfo.Private">
            <summary>
            Private memory set size in bytes
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.MemoryInfo.Physical">
            <summary>
            Physical memory size in bytes
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Proc.MemoryInfo.WorkingSet">
            <summary>
            Working set size in bytes
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Service">
            <summary>
            Service class
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.#ctor(xOSaClientNetLib.XosaClient,System.String,xOSaClientNetLib.Process.Service.ServiceState,xOSaClientNetLib.Process.Service.ServiceStatus,System.String,System.Collections.Generic.IEnumerable{xOSaClientNetLib.Process.Proc})">
            <summary>
            Public constructor
            </summary>
            <param name="client">xOSa client</param>
            <param name="name">Service Name</param>
            <param name="state">Service state</param>
            <param name="status">Service status</param>
            <param name="description">Service description</param>
            <param name="procs">Underlying process</param>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.#ctor(xOSaClientNetLib.Process.Service)">
            <summary>
            Copy cons
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Start">
            <summary>
            Starts service
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Start(System.UInt32)">
            <summary>
            Starts service
            </summary>
            <param name="timeout">service timeout in milliseconds</param>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Stop">
            <summary>
            Stop services
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Stop(System.UInt32)">
            <summary>
            Stops service
            </summary>
            <param name="timeout">service timeout milliseconds</param>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Disable">
            <summary>
            Disable service
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Enable">
            <summary>
            Enable service
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Process.Service.Reload">
            <summary>
            Reload service information
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Service.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Service.Name">
            <summary>
            Service Name
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Service.Description">
            <summary>
            Service description
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Service.Status">
            <summary>
            Last known service status
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.Process.Service.State">
            <summary>
            Last known service state
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Service.Unmanaged">
            <summary>
            Helper class to correctly read unmanaged data
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Service.ServiceState">
            <summary>
            Service state
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.Running">
            <summary>
            Service is running
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.Stopped">
            <summary>
            Service is stopped
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.StartPending">
            <summary>
            Service start pending
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.StopPending">
            <summary>
            Service stop pending
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.ContinuePending">
            <summary>
            Service continue pending
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.PausePending">
            <summary>
            Service pause pending
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceState.Paused">
            <summary>
            Service paused
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.Service.ServiceStatus">
            <summary>
            Service status
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceStatus.Automatic">
            <summary>
            Service enabled, automatic start
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceStatus.Manual">
            <summary>
            Service enabled, manual start
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceStatus.Delayed">
            <summary>
            Service enabled, manual start
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.Process.Service.ServiceStatus.Disabled">
            <summary>
            Service disabled
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessTerminateParameters">
            Input parameters for Process Terminate command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessTerminateParameters.size">
            IN: call it with sizeof(struct XosaClientProcessTerminateParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessTerminateParameters.id">
            IN: process identifier
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessServiceEnumerateParameters">
            Input parameters for Process Service Enumerate command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceEnumerateParameters.size">
            IN: call it with sizeof(struct XosaClientProcessServiceEnumerateParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceEnumerateParameters.filter">
            IN: string in format: {ProcessInformation.field_name=value} 
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceEnumerateParameters.first">
            OUT: pointer to store first ProcessInformation struct
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceEnumerateParameters.count">
            OUT:  number of instances pointed by *first
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessServiceStartParameters">
            Input parameters for Process Service Start command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStartParameters.size">
            IN: call it with sizeof(struct XosaClientProcessServiceStartParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStartParameters.name">
            IN: name of the service to start
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStartParameters.timeout">
            IN: wait timeout
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStartParameters.nativeErrorCode">
            OUT: nativeErrorCode, native error code if available
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessEnumerateStartParameters">
            Input parameters for Process Enumerate Start command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessEnumerateStartParameters.size">
            IN: call it with sizeof(struct XosaClientProcessEnumerateStartParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessEnumerateStartParameters.filter">
            IN: string in format: {ProcessInformation.field_name=value} 
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessEnumerateStartParameters.first">
            OUT: pointer to store first ProcessInformation struct
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessEnumerateStartParameters.count">
            OUT:  number of instances pointed by *first
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessServiceStopParameters">
            Input parameters for Process Service Stop command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStopParameters.size">
            IN: call it with sizeof(struct XosaClientProcessServiceStopParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStopParameters.name">
            IN: name of the service to stop
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStopParameters.timeout">
            IN: wait timeout
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceStopParameters.nativeErrorCode">
            OUT: nativeErrorCode, native error code if available
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessServiceReleaseEnumerationParameters">
            Input parameters for Process Service Release Enumeration command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceReleaseEnumerationParameters.size">
            IN: call it with sizeof(struct XosaClientProcessServiceReleaseEnumerationParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessServiceReleaseEnumerationParameters.first">
            IN: pointer to first service to release
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessReleaseEnumerationParameters">
            Input parameters for Process Release Enumeration command API
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessReleaseEnumerationParameters.size">
            IN: call it with sizeof(struct XosaClientProcessReleaseEnumerationParameters)
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessReleaseEnumerationParameters.first">
            IN: pointer to first service to release
        </member>
        <member name="T:xOSaClientNetLib.Process.XosaClientProcessApi">
            Client Process API functions
        </member>
        <member name="F:xOSaClientNetLib.Process.XosaClientProcessApi.size">
            call it with sizeof(struct XosaClientProcessApi)
        </member>
        <member name="T:xOSaClientNetLib.Socket">
            <summary>
            C# Wrapper for xOSa Socket API
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Socket.#ctor(xOSaClientNetLib.XosaClient,System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the Socket class using the specified address family, socket type and protocol.
            </summary>
            <param name="client">xOSa client</param>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.#ctor(xOSaClientNetLib.XosaClient,System.Int32)">
            <summary>
            Initializes a new instance of the Socket class using the specified address family, socket type and protocol.
            </summary>
            <param name="client">xOSa client</param>
            <param name="socket">xOSa Socket</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Dispose">
            <summary>
             IDisposable member
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Close">
            <summary>
            An alias to Dispose
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Dispose(System.Boolean)">
            <summary>
            disposing is true when this function is called by IDisposable interface
            </summary>
            <param name="disposing">false when it is called by the Finalizer</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Finalize">
            <summary>
            Use C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
            <param name="localEP">The local EndPoint to associate with the Socket.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Listen(System.Int32)">
            <summary>
            Places a Socket in a listening state.
            </summary>
            <param name="backlog">The maximum length of the pending connections queue.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Accept">
            <summary>
            Creates a new Socket for a newly created connection.
            </summary>
            <returns>A Socket for a newly created connection.</returns>
        </member>
        <member name="M:xOSaClientNetLib.Socket._connect(System.String)">
            <summary>
            Establishes a connection to a remote host.
            </summary>
            <param name="address">A string that represents the remote device.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote host.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Establishes a connection to a remote host. The host is specified by an IP address and a port number.
            </summary>
            <param name="address">The IP address of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote host. The host is specified by a host name and a port number.
            </summary>
            <param name="host">The name of the remote host.</param>
            <param name="port">The port number of the remote host.</param>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Receive(System.Byte[])">
            <summary>
            Receives data from a bound Socket into a receive buffer.
            </summary>
            <param name="buffer">An array of type Byte that is the storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Send(System.Byte[])">
            <summary>
            Sends data to a connected Socket.
            </summary>
            <param name="buffer">An array of type Byte that contains the data to be sent.</param>
            <returns>The number of bytes sent to the Socket.</returns>
        </member>
        <member name="M:xOSaClientNetLib.Socket.Select(xOSaClientNetLib.XosaClient,System.Collections.Generic.IList{xOSaClientNetLib.Socket},System.Collections.Generic.IList{xOSaClientNetLib.Socket},System.Collections.Generic.IList{xOSaClientNetLib.Socket},System.Int32)">
            <summary>
            Determines the status of one or more sockets.
            </summary>
            <param name="client">xOSa client</param>
            <param name="checkRead">An IList of Socket instances to check for readability.</param>
            <param name="checkWrite">An IList of Socket instances to check for writability.</param>
            <param name="checkError">An IList of Socket instances to check for errors.</param>
            <param name="microSeconds">The time-out value, in microseconds. A -1 value indicates an infinite time-out.</param>
        </member>
        <member name="P:xOSaClientNetLib.Socket.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketCreateParameters">
            Parameters for Socket Create API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCreateParameters.size">
            IN: call it with sizeof(struct XosaClientSocketCreateParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCreateParameters.addressFamily">
            IN: One of the SOCKET_ADDRESS_FAMILY values
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCreateParameters.socketType">
            IN: One of the SOCKET_TYPE values
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCreateParameters.protocolType">
            IN: One of the SOCKET_PROTOCOL_TYPE values
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCreateParameters.socket">
            OUT: The created xOSa socket
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketCloseParameters">
            Parameters for Socket Close API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCloseParameters.size">
            IN: call it with sizeof(struct XosaClientSocketCloseParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketCloseParameters.socket">
            IN: The xOSa socket to be closed
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketBindParameters">
            Parameters for Socket Bind API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketBindParameters.size">
            IN: call it with sizeof(struct XosaClientSocketBindParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketBindParameters.socket">
            IN: xOSa socket to operate
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketBindParameters.localEndPoint">
            IN: The local EndPoint to associate with the xOSa socket
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketListenParameters">
            Parameters for Socket Listen API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketListenParameters.size">
            IN: call it with sizeof(struct XosaClientSocketListenParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketListenParameters.socket">
            IN: xOSa socket to operate
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketListenParameters.backlog">
            IN: The maximum length of the pending connections queue
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketAcceptParameters">
            Parameters for Socket Accept API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketAcceptParameters.size">
            IN: call it with sizeof(struct XosaClientSocketAcceptParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketAcceptParameters.socket">
            IN: xOSa socket to operate
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketAcceptParameters.clientSocket">
            OUT: A xOSa socket for a newly created connection
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketConnectParameters">
            Parameters for Socket Connect API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketConnectParameters.size">
            IN: call it with sizeof(struct XosaClientSocketConnectParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketConnectParameters.socket">
            IN: xOSa socket to operate
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketConnectParameters.remoteEndPoint">
            IN: A string that represents the remote device
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketReceiveParameters">
            Parameters for Socket Receive API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketReceiveParameters.size">
            IN: call it with sizeof(struct XosaClientSocketReceiveParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketReceiveParameters.socket">
            IN: xOSa socket to operate
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketReceiveParameters.bufferSize">
            IN: The buffer size
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketReceiveParameters.buffer">
            INOUT: A buffer for the storage location for the received data
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketReceiveParameters.bytesReceived">
            OUT: The number of bytes received
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketSendParameters">
            Parameters for Socket Send API
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSendParameters.size">
            IN: call it with sizeof(struct XosaClientSocketSendParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSendParameters.socket">
            IN: xOSa socket to operate
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSendParameters.bufferSize">
            IN: The buffer size 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSendParameters.buffer">
            IN: A buffer that contains the data to be sent 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSendParameters.bytesSent">
            OUT:The number of bytes sent
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters">
            Parameters for Socket Send API 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.size">
            IN: call it with sizeof(struct XosaClientSocketSelectParameters)
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.readSockets">
            IN: An array of xOSa socket instances to check for readability
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.readSocketsLength">
            IN: readSockets array size
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.writeSockets">
            IN: An array of xOSa socket instances to check for writability
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.writeSocketsLength">
            IN: writeSockets array size
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.errorSockets">
            IN: An array of xOSa socket instances to check for errors
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.errorSocketsLength">
            IN: errorSockets array size
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.readSocketsReady">
            INOUT: An array of xOSa socket instances ready to read
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.readSocketsReadyLength">
            OUT: readSocketsReady array size 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.writeSocketsReady">
            INOUT: An array of xOSa socket instances ready to write 
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.writeSocketsReadyLength">
            OUT: writeSocketsReady array size
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.errorSocketsReady">
            INOUT: An array of xOSa socket instances with errors
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.errorSocketsReadyLength">
            OUT: errorSocketsReady array size
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketSelectParameters.microSeconds">
            IN: The time-out value, in microseconds. A -1 value indicates an infinite time-out.
        </member>
        <member name="T:xOSaClientNetLib.Socket.XosaClientSocketApi">
            Client Socket API functions
        </member>
        <member name="F:xOSaClientNetLib.Socket.XosaClientSocketApi.size">
            call it with sizeof(struct XosaClientSocketApi)
        </member>
        <member name="T:xOSaClientNetLib.XosaClient">
            <summary>
            C# Wrapper for xOSa Client Library
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XOSA_LOG_INFO">
            <summary>
            Critial, non critial errors, warnings and debug information
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XOSA_LOG_WARNING">
            <summary>
            Critial, non critial errors and warnings 
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XOSA_LOG_ERROR">
            <summary>
            Critial and non critial errors 
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XOSA_LOG_CRITICAL">
            <summary>
            Critical errors only
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.#ctor">
            <summary>
            Initiates xOSa local client instance
            Used to initiate a direct local client
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.#ctor(System.String)">
            <summary>
            Initiates xOSa remote client instance
            Used to initiate a remote client
            </summary>
            <param name="serverAddress">server TCP address:port</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Finalize">
            <summary>
            C# destructor syntax for finalization code.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Dispose">
            <summary>
            IDisposable interface implementation
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Dispose(System.Boolean)">
            <summary>
            IDisposable interface implementation
            </summary>
            <param name="disposing">Disposing is true when this function is called by IDisposable interface, false when it is called by the Finalizer</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.ResetAgent">
            <summary>
            Reset xOSa agent. This method is supported for network only.
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.SetEnvironment(System.String,System.String,System.Boolean)">
            <summary>
            Set environment variable
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="persistent"></param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.LoggerAddRecord(System.Int32,System.String,System.String)">
            <summary>
            Set log severity
            </summary>
            <param name="severity"></param>
            <param name="component"></param>
            <param name="logRecord"></param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.FilterLogSeverity(System.Int32)">
            <summary>
            Set log severity
            </summary>
            <param name="minSeverity">Minimal severiry, smaller values => more logs</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.GetHeciConnection(System.Guid)">
            <summary>
            Initiates a new Heci instance.
            If client is not initialized throws an exception
            </summary>
            <param name="guid">GUID to init a new HECI instance from</param>
            <returns>Heci instance</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Pci(System.UInt16,System.UInt16)">
            <summary>
            Initiates a new Pci instance.
            If client is not initialized throws an exception
            </summary>
            <param name="vendorId">Vendor ID of Pci device</param>
            <param name="deviceId">Device ID of Pci device</param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Pci(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initiates a new Pci instance.
            If client is not initialized throws an exception
            </summary>
            <param name="bus">bus of Pci device</param>
            <param name="device">device of Pci device</param>
            <param name="function">function of Pci device</param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.PciTEXI">
            <summary>
            Initiates a new Pci instance. With device Id and Vendor Id of TEXI driver
            If client is not initialized throws an exception
            </summary>
            <returns>Pci instace of TEXI Driver</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.GetMemory">
            <summary>
            Returns a new Memory instance
            </summary>
            <returns>a new Memory instance</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.GetIoPort">
            <summary>
            Returns a new IoPort instance
            </summary>
            <returns>a new IoPort instance</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.RunCommand(System.String)">
            <summary>
            Start a command line process with no additional arguments
            </summary>
            <param name="command">The executable command to run.</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.RunCommand(System.String,System.String[])">
            <summary>
            Start a command line process
            </summary>
            <param name="command">The executable command to run.</param>
            <param name="args">Arguments used to run the executable</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.RunCommand(System.String,System.String[],System.String)">
            <summary>
            Start a command line process
            </summary>
            <param name="command">The executable command to run.</param>
            <param name="args">Arguments used to run the executable</param>
            <param name="workingDir">Working directory for the executable</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.RunCommand(System.String,System.String[],System.Boolean,System.Boolean,System.String)">
            <summary>
            Start a command line process
            </summary>
            <param name="command">The executable command to run.</param>
            <param name="args">Arguments used to run the executable</param>
            <param name="captureStdOut">If True will capture the stdout</param>
            <param name="captureStdErr">If True will capture the stderr</param>
            <param name="workingDir">Working directory for the executable</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.RunCommand(xOSaClientNetLib.XosaClient.RunCommandParameters)">
            <summary>
            Extended version for Cli.Run
            </summary>
            <param name="parameters">RunCommandParameters parameters </param>
            <returns>Cli object representing runnig command</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.ExecuteCommand(System.String,System.String[],System.String,xOSaClientNetLib.Cli.Redirection,System.Int32)">
            <summary>
            Universal wrapper for CLI interface
            </summary>
            <param name="command">Command</param>
            <param name="arguments">Command arguments</param>
            <param name="workingDir">Working directory</param>
            <param name="redirection">Redirection flags, default value no redirection at all</param>
            <param name="timeout">Command timeout in seconds to finish, default value is infinity</param>
            <returns></returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Driver(System.String)">
            <summary>
            Initiates a new Driver instance.
            If client is not initialized throws an exception
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Driver(System.Guid)">
            <summary>
            Initiates a new Driver instance by GUID
            If client is not initialized throws an exception
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Socket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
             Initiates a new Socket instance.
            </summary>
            <param name="addressFamily"> Address family of the requested socket</param>
            <param name="socketType">Socket type of the requested socket</param>
            <param name="protocolType">Protocol type of the requested socket</param>
            <returns> Return the new Socket instance.</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.SetRequestTimeout(System.Int32)">
            <summary>
            Set the global request timeout for each new network request
            If client is not initialized throws an exception
            </summary>
            <param name="requestTimeout">timeout value in seconds that will be applied to new network requests  \</param>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.GetStatusMessage(System.Int32)">
            <summary>
            Get a message describing XOSA_STATUS
            </summary>
            <param name="statusId">the XOSA_STATUS id to be describedby the message</param>
            <returns>the component that is the source of the log record</returns>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.RegisterException(xOSaClientNetLib.XosaException.StatusCode,xOSaClientNetLib.XosaClient.MakeXosaException)">
            <summary>
            Register a mapping froom a XOSA_STATUS value to a .NET exception inherited by XosaException
            </summary>
            <param name="xosaStatus">XOSA_STATUS value to be mapped</param>
            <param name="exceptionFunc">Delegate to create an exception that maps to the XOSA_STATUS</param>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.HostAddress">
            <summary>
            Get the address of the xOSa agent 
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.HostPort">
            <summary>
            Get the port of the xOSA agent
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.PciDevices">
            <summary>
            List of PCI devices found in the system
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.Power">
            <summary>
            Initiates a new Power instance.
            If client is not initialized throws an exception
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.File">
            <summary>
            Initiates a new File instance.
            If client is not initialized throws an exception
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.Process">
            <summary>
            Initiates a new Process instance.
            If client is not initialized throws an exception
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.Timeout">
            <summary>
            Specifies a timeout in seconds for xOSa remote API call
            </summary>
        </member>
        <member name="P:xOSaClientNetLib.XosaClient.Info">
            <summary>
            xOSa client inforarmation getter 
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientParameters">
            <summary>
            Struct describes requested client parameters
            struct extends only by adding new fields at the end
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientParameters.size">
            IN: call it with sizeof(struct XosaClientParameters)
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientParameters.ip">
            IN: ip 
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientParameters.port">
            IN: port
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientParameters.timeout">
            IN: timeout
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientParameters.loggerSeverity">
            IN: logger severity
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientParameters.reserved">
            reserved
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientConnection">
            <summary>
            Struct describes connection to xOSa
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.size">
            call it with sizeof(struct XosaClientConnection)
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.CliPtr">
            Cli API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.DriverPtr">
            Driver API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.FilePtr">
            File API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.HeciPtr">
            Heci API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.MemoryPtr">
            Memory API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.PciPtr">
            PCI API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.PluginPtr">
            Plugin API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.PowerPtr">
            Power API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.ProcessPtr">
            Process API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.SystemPtr">
            System API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.SocketPtr">
            Socket API
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientConnection.IoPortPtr">
            IOPort API
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientConnection.LoggerFilterLogSeverityType">
            Set severity
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientConnection.SetGlobalRequestTimeoutType">
            Set timeout
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientConnection.GetLogDirNameType">
            Get logger dir
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientApiCallParameters">
            <summary>
            Struct describes fune tuning options for api call 
            struct extends only by adding new fields at the end
            Struct describes connection to xOSa
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientApiCallParameters.size">
            IN: call it with sizeof(struct XosaClientApiCallParameters)
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientApiCallParameters.timeout">
            IN:  request timeout in seconds
            It is the timeout before dropping the request made through network
            this timeout will overwitre the timeout from the global-timeout
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientLoggerFilterLogSeverityParameters">
            <summary>
            Parameters for Client LoggerFilterLogSeverity
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerFilterLogSeverityParameters.size">
            IN: Call it with sizeof(struct XosaClientLoggerFilterLogSeverityParameters )
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerFilterLogSeverityParameters.minSeverity">
            IN: minimal severity  
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientSetRequestTimeoutParameters">
            <summary>
            Parameters for Client SetGlobalRequestTimeout
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientSetRequestTimeoutParameters.size">
            IN: Call it with sizeof(struct XosaClientSetGlobalRequestTimeoutParameters )
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientSetRequestTimeoutParameters.requestTimeout">
            IN: the request timeout
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientLoggerGetDirParameters">
            <summary>
            Parameters for Client LoggerGetDir
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerGetDirParameters.size">
            IN: Call it with sizeof(struct XosaClientLoggerGetDirParameters )
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerGetDirParameters.fileNameBuffer">
            INOUT: output buffer containing the logger directory path
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerGetDirParameters.bufferSize">
            IN: size of the buffer
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerGetDirParameters.requiredSize">
            OUT: required size to contain the dir path
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientLoggerAddRecordParameters">
            Parameters for Client XosaClientLoggerGetDirParameters
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerAddRecordParameters.size">
            IN: Call it with sizeof(struct XosaClientLoggerGetDirParameters )
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerAddRecordParameters.Severity">
            IN: Severity of log record (INFO -> CRITICAL
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerAddRecordParameters.Component">
            IN: String indicating the software module which prints the log record
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientLoggerAddRecordParameters.LogRecord">
            IN: log record
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientSystemInformationParameters">
            Parameters for System Xosa Information command API 
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientSystemInformationParameters.size">
            IN: call it with sizeof(struct XosaClientSystemInformationParameters)
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientSystemInformationParameters.info">
            OUT: information about the system that runs xOSa service.
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.SystemOsInformationParameters">
            Parameters for OS Information command API 
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.SystemOsInformationParameters.size">
            IN: call it with sizeof(struct XosaClientSystemInformationParameters)
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.SystemOsInformationParameters.info">
            OUT: information about the system that runs xOSa service.
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientSystemResetAgentParameters">
            Parameters for System Reset Agent command API 
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientSystemResetAgentParameters.size">
            IN: call it with sizeof(struct XosaClientSystemResetAgentParameters)
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.SystemGetLastNativeErrorParameters.msgBuffer">
            INOUT: output buffer containing the logger directory path
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.SystemGetLastNativeErrorParameters.bufferSize">
            IN: size of the buffer
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.SystemGetLastNativeErrorParameters.requiredSize">
            OUT: required size to contain the dir path
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.XosaClientSystemApi">
            <summary>
            Client System API commands
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.XosaClientSystemApi.size">
            call it with sizeof(struct XosaClientHeciApi)
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.RunCommandParameters">
            <summary>
            Start a command line process
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.Command">
            IN: The executable command to run.
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.Args">
            IN: Arguments used to run the executable
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.CaptureStdOut">
            IN: If True will capture the stdout
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.CaptureStdErr">
            IN: If True will capture the stderr
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.CaptureStdIn">
            IN: If True will allow to write to the stdin
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.WorkingDir">
            IN: Working directory for the executable
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.User">
            IN: User name
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.Pass">
            IN: User password
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.IsGui">
            IN: Command requires GUI interaction
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.StdOutDataDelegate">
            IN/OUT: Delegate to read stdout data
        </member>
        <member name="F:xOSaClientNetLib.XosaClient.RunCommandParameters.StdErrDataDelegate">
            IN/OUT: Delegate to read stderr data
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.Information">
            <summary>
            Xosa Client Information 
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaClient.Information.#ctor(xOSaClientNetLib.XosaClient.Information.XosaInformation,xOSaClientNetLib.XosaClient.Information.OsInformation)">
            <summary>
            Public constructor
            </summary>
            <param name="xosa"></param>
            <param name="system"></param>
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.Information.OsTypes">
            <summary>
            OUT: Operating system type
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.Information.CpuTypes">
            <summary>
            OUT: Architecture type
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.Information.XosaInformation">
            <summary>
            OUT: Xosa specific information, may differ from system information
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.XosaClient.Information.OsInformation">
            <summary>
            OUT: OS information
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.XosaClientConnectionExtensions">
            <summary>
            Helper class, not to be used directly.
            It defines extensions methods to native XosaClientConnection struct.
            In this way marshalling is not affected
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.XosaException">
            <summary>
            Basic xOSa exception class each component should inherit for it
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaException.Code">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.XosaException.AdditionalData">
            <summary>
            Additional data if available
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaException.#ctor(System.String,xOSaClientNetLib.XosaException.StatusCode)">
            <summary>
            Constructor, accessible to inheriting classes
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.XosaException.#ctor(System.String)">
            <summary>
            Constructor, accessible to inheriting classes
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:xOSaClientNetLib.XosaException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor, accessible to inheriting classes
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:xOSaClientNetLib.XosaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor, accessible to inheriting classes
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:xOSaClientNetLib.XosaException.StatusCode">
            <summary>
            Enum of XOSA_STATUS
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.UnrecognizedException">
            <summary>
            Unrecognazied Excepiton. The xOSa client may be older than the xOSa server
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.UnrecognizedException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.UnrecognizedException.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.GeneralException">
            <summary>
            General Exception
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.GeneralException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.InvalidInputException">
            <summary>
            Invalid input parameter
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.InvalidInputException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.InvalidInputException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FwClientNotFoundException">
            <summary>
            FW client not found
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FwClientNotFoundException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FwClientNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.NotInitializedException">
            <summary>
            xOSaClient is not initialized
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.NotInitializedException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.NotInitializedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.AlreadyInitializedException">
            <summary>
            xOSaClient is already initialized
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.AlreadyInitializedException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.AlreadyInitializedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.InvalidHandleException">
            <summary>
            Invalid handle given
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.InvalidHandleException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.InvalidHandleException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.UnsupportedException">
            <summary>
            Unsupported operation
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.UnsupportedException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.UnsupportedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.ConnectionException">
            <summary>
            No connection to xOSa server
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.ConnectionException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.ConnectionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DuplicateClientException">
            <summary>
            Duplicate client (Deprecated)
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DuplicateClientException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DuplicateClientException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.NonActiveClientException">
            <summary>
            Client not active (Deprecated)
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.NonActiveClientException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.NonActiveClientException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.TimeoutException">
            <summary>
            Timeout has expired
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.TimeoutException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.TimeoutException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.IncorrectStateException">
            <summary>
            Incorrect state at server for this request
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.IncorrectStateException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.IncorrectStateException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.OsException">
            <summary>
            Operating System error
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.OsException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.OsException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.TransferDataException">
            <summary>
            Transfer data error
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.TransferDataException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.TransferDataException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.UnknownException">
            <summary>
            Unknown error occured
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.UnknownException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.UnknownException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.AuthenticationException">
            <summary>
            Authentication error occured
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.AuthenticationException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.AuthenticationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.ReadException">
            <summary>
            Error while reading
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.ReadException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.ReadException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.WriteException">
            <summary>
            Error while writing
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.WriteException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.WriteException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.PciNoDevicesFoundException">
            <summary>
            No PCI device (Deprecated)
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.PciNoDevicesFoundException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.PciNoDevicesFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.PciDeviceNotFoundException">
            <summary>
            No PCI device is found with the given VENDOR ID and DEVICE ID
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.PciDeviceNotFoundException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.PciDeviceNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.SmallBufferException">
            <summary>
            Error small buffer
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.SmallBufferException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.SmallBufferException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.MemoryAccessException">
            <summary>
            Memory access fault
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.MemoryAccessException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.MemoryAccessException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.MemoryAllocationException">
            <summary>
            Memory allocation fault
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.MemoryAllocationException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.MemoryAllocationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.MemoryFreeException">
            <summary>
            Memory free fault
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.MemoryFreeException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.MemoryFreeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.StdoutNotReadException">
            <summary>
            stdout must be read before you can read stderr
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.StdoutNotReadException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.StdoutNotReadException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.NoDataException">
            <summary>
            Not available data currently. Try later
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.NoDataException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.NoDataException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DirectoryCreationException">
            <summary>
            Error create folder
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DirectoryCreationException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DirectoryCreationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileExistException">
            <summary>
            File already exist
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileExistException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileExistException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileDoesntExistException">
            <summary>
            File doesn't exist
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileDoesntExistException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileDoesntExistException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DirectoryDoesntExistException">
            <summary>
            Directory doesn't exist
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DirectoryDoesntExistException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DirectoryDoesntExistException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileDeleteException">
            <summary>
            Error delete file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileDeleteException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileDeleteException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DirectoryDeleteException">
            <summary>
            Error remove folder
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DirectoryDeleteException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DirectoryDeleteException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.LocalFileReadException">
            <summary>
            Failed to read local file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.LocalFileReadException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.LocalFileReadException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.GetFileInfoException">
            <summary>
            Failed to get file information
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.GetFileInfoException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.GetFileInfoException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.NotDirectoryException">
            <summary>
            Given name is a file not a directory
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.NotDirectoryException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.NotDirectoryException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileOpenException">
            <summary>
            Error open file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileOpenException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileOpenException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileUploadTerminatedException">
            <summary>
            File upload was terminated by the user request
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileUploadTerminatedException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileUploadTerminatedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.RemoteFileWriteException">
            <summary>
            Failed to write remote file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.RemoteFileWriteException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.RemoteFileWriteException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.NotFileException">
            <summary>
            Given name is a directory not a file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.NotFileException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.NotFileException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileDownloadTerminatedException">
            <summary>
            File download was terminated by the user request
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileDownloadTerminatedException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileDownloadTerminatedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileCreateException">
            <summary>
            Failed to create the file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileCreateException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileCreateException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileMoveException">
            <summary>
            Failed to move the file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileMoveException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileMoveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileCopyException">
            <summary>
            Failed to copy the file
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileCopyException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileCopyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.FileCloseException">
            <summary>
            Failed to close the file handle
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.FileCloseException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.FileCloseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.InvalidDriverException">
            <summary>
            Invalid driver handle
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DriverException">
            <summary>
            CancelIo function in Driver, cannot find an IO request to cancel.
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DriverException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DriverException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DriverException.#ctor(System.String,xOSaClientNetLib.XosaException.StatusCode)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.InvalidDriverException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.InvalidDriverException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DriverTimeoutException">
            <summary>
            Driver timeout
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DriverTimeoutException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DriverTimeoutException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DriverNotAllowNonBlockingException">
            <summary>
            Driver doesn't allow to be set as non blocking
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DriverNotAllowNonBlockingException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DriverNotAllowNonBlockingException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.DriverNoIoException">
            <summary>
            CancelIo function in Driver, cannot find an IO request to cancel.
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.DriverNoIoException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.DriverNoIoException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.ServiceAlreadyRunningException">
            <summary>
            Service already running
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.ServiceAlreadyRunningException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.ServiceAlreadyRunningException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.PluginOpenException">
            <summary>
            Error opening (loading) a plugin
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.PluginOpenException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.PluginOpenException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.PluginFunctionNotFoundException">
            <summary>
            Function in plugin not found
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.PluginFunctionNotFoundException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.PluginFunctionNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.UnsupportedSocketTypeException">
            <summary>
            The requested socket type is not supported
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.UnsupportedSocketTypeException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.UnsupportedSocketTypeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.InvalidEndpointException">
            <summary>
            The endpoint cannot be resolved to a valid address
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.InvalidEndpointException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.InvalidEndpointException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.CannotBindException">
            <summary>
            Error in binding the socket
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.CannotBindException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.CannotBindException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.NonBindedSocketException">
            <summary>
            The socket is not binded
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.NonBindedSocketException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.NonBindedSocketException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.CannotListenException">
            <summary>
            Error when listening to the given endpoint
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.CannotListenException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.CannotListenException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.AcceptException">
            <summary>
            Error when accepting a new conncetion
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.AcceptException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.AcceptException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.CannotConnectException">
            <summary>
            Error in connecting to the given endpoint
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.CannotConnectException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.CannotConnectException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.CannotReceiveException">
            <summary>
            "Error when receiving data
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.CannotReceiveException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.CannotReceiveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.ConnectException">
            <summary>
            Error in connecting to the given endpoint
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.ConnectException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.ConnectException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.ReceiveException">
            <summary>
            Error when receiving data
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.ReceiveException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.ReceiveException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.SendException">
            <summary>
            Error when sending data
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.SendException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.SendException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:xOSaClientNetLib.CannotSendException">
            <summary>
            ,Error when sending data"
            </summary>
        </member>
        <member name="F:xOSaClientNetLib.CannotSendException.CODE">
            <summary>
            XOSA_STATUS related to this exception type
            </summary>
        </member>
        <member name="M:xOSaClientNetLib.CannotSendException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
    </members>
</doc>
